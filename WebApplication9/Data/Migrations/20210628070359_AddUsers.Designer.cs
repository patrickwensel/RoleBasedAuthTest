// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication9.Data;

namespace WebApplication9.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210628070359_AddUsers")]
    partial class AddUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication9.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c2b0541f-4819-4a10-9e62-63d53c2bf8a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a66fc890-e48f-4e38-af8a-f8f8ac1dd1b7",
                            Email = "admin@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAPLIGHT.ORG",
                            NormalizedUserName = "ADMIN@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEE5OHKWPHhfzYMqrgZbJ4JrVHHQppQKl0LHCYKQDVftRPeViISVoTP9RAgl5CFIvow==",
                            PhoneNumber = "255684811042",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b952aa8-dce1-4d39-ac47-a48ea3b5bfb5",
                            TwoFactorEnabled = false,
                            UserName = "admin@maplight.org"
                        },
                        new
                        {
                            Id = "aff709de-7468-451e-9839-b538cc7e9941",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5823ff7a-9553-49d6-b893-04be3b48fe57",
                            Email = "candidate@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CANDIDATE@MAPLIGHT.ORG",
                            NormalizedUserName = "CANDIDATE@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKUz774XwUqrWIAyl0qIgjzEms6Lh+XK5fDg4C9zUPbEuseHoLlazkKI9Z8ddoPnqA==",
                            PhoneNumber = "255684811043",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e12dd91-f3b7-445c-ab5c-a67d0d08c0c3",
                            TwoFactorEnabled = false,
                            UserName = "candidate@maplight.org"
                        },
                        new
                        {
                            Id = "ad89b30a-695b-4296-8a60-fd8f3f2936d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "675dfae5-6aaa-441f-a8ab-1fd3caa54c82",
                            Email = "treasurer@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TREASURER@MAPLIGHT.ORG",
                            NormalizedUserName = "TREASURER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEISpeaVlCeqtQaWCeoemiF2dMF2PmwOWSCKKtA6NuI5QJZ2gk59D+u1xg9EfcLE5XQ==",
                            PhoneNumber = "255684811044",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60d7f70a-89b2-4a48-9cd7-6dadc33cd862",
                            TwoFactorEnabled = false,
                            UserName = "treasurer@maplight.org"
                        },
                        new
                        {
                            Id = "1f4b26a9-d046-4513-97f8-784c4fd31486",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1864406b-7db4-46f6-be79-2a077db9575e",
                            Email = "officer@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OFFICER@MAPLIGHT.ORG",
                            NormalizedUserName = "OFFICER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLAoZLucfbUJAh8Xm8ANiAIKnyw2Zs9RHfV6v08iwNgZ/yaWbEIxhx416E/1vA8LA==",
                            PhoneNumber = "255684811045",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2aa61fe4-8720-45bf-b025-1aa360d9a888",
                            TwoFactorEnabled = false,
                            UserName = "officer@maplight.org"
                        },
                        new
                        {
                            Id = "23b03c1d-9439-42c3-989e-afc4caa371f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "161ab4b4-9be2-4531-b2b6-08c86cd98b57",
                            Email = "primaryregisteredlobbyist@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PRIMARYREGISTEREDLOBBYIST@MAPLIGHT.ORG",
                            NormalizedUserName = "PRIMARYREGISTEREDLOBBYIST@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDpk5d+ek1EMjNXMAyBW0ynxVSNUXbSFwLH8m7JtP2QEfDMtmeiFbMz0aL9N3eBRQ==",
                            PhoneNumber = "255684811046",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97452989-c6be-4c7e-bb73-d345724f0507",
                            TwoFactorEnabled = false,
                            UserName = "primaryregisteredlobbyist@maplight.org"
                        },
                        new
                        {
                            Id = "c5facb3c-7289-4756-9afb-4e02f5a28740",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce919715-46ae-4741-9c27-6b515fe48b38",
                            Email = "otherlobbyost@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OTHERLOBBYOST@MAPLIGHT.ORG",
                            NormalizedUserName = "OTHERLOBBYOST@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAECt81gCCUJQnTrOD35w45io8V/IU5+/IpPaMnU2fiozgDeLBPKPrhMKpobgzsvbr1w==",
                            PhoneNumber = "255684811047",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66e7187f-4e8e-492a-a4f9-c566b6fa830e",
                            TwoFactorEnabled = false,
                            UserName = "otherlobbyost@maplight.org"
                        },
                        new
                        {
                            Id = "0fb18dd5-9cff-4635-86d0-76416b16b570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "040021a7-4266-4344-a53f-27c8142cfbb6",
                            Email = "iefilerprimaryuser@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IEFILERPRIMARYUSER@MAPLIGHT.ORG",
                            NormalizedUserName = "IEFILERPRIMARYUSER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYOgeoc4XfRVeM9dJ3Ispv9a08ocQp0CC8kRqkOtkfdb+lPz+vLCoekF8bNG2CQXA==",
                            PhoneNumber = "255684811048",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17a9e822-5506-4b01-a9d0-5cf0d922d011",
                            TwoFactorEnabled = false,
                            UserName = "iefilerprimaryuser@maplight.org"
                        },
                        new
                        {
                            Id = "92465d77-d88d-487a-86aa-d8783fc8702d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fe6591b-b6b0-4424-81ad-aab06f422658",
                            Email = "iefilersecondaryuser@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "iefilersecondaryuser@MAPLIGHT.ORG",
                            NormalizedUserName = "IEFILERSECONDARYUSER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEMzyAsSLhnDfcyzH5QMD0mYRirGO2yKJr0V8VUyMAGcFuYcahnhHlZb0oyAwPIrw==",
                            PhoneNumber = "255684811049",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e43dd0b-7c79-4344-8a3e-7463161aa2f6",
                            TwoFactorEnabled = false,
                            UserName = "iefilersecondaryuser@maplight.org"
                        },
                        new
                        {
                            Id = "5f094eb0-c08c-4c95-a085-9e93638d981c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c16dd032-f8c5-4968-a07a-d95e6abc7377",
                            Email = "ethicsprimaryuser@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHICSPRIMARYUSER@MAPLIGHT.ORG",
                            NormalizedUserName = "ETHICSPRIMARYUSER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAEHxtAXyHKCWAH87MKqLA59fgKtddxTNJAsbSaHCxrBOj4UWlKTF6ifF8/55sAxkXfQ==",
                            PhoneNumber = "255684811050",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e4dece80-7323-4465-85a9-24d80c3d4753",
                            TwoFactorEnabled = false,
                            UserName = "ethicsprimaryuser@maplight.org"
                        },
                        new
                        {
                            Id = "aac55d50-3863-47ba-bfc0-bd68c0d770af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bef7a836-24fe-4d40-9dbf-d81812be613e",
                            Email = "ethicssecondaryuser@maplight.org",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHICSSECONDARYUSER@MAPLIGHT.ORG",
                            NormalizedUserName = "ETHICSSECONDARYUSER@MAPLIGHT.ORG",
                            PasswordHash = "AQAAAAEAACcQAAAAELgJRnGdGwwHaQIJHDme/jbbB05G0IRThgMJZyRt6m6AyjcCjB2l3GT8xrgr8WYbOQ==",
                            PhoneNumber = "255684811051",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06207805-a6be-490a-bd0f-683811783b77",
                            TwoFactorEnabled = false,
                            UserName = "ethicssecondaryuser@maplight.org"
                        });
                });

            modelBuilder.Entity("WebApplication9.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "1e67e9cd-bf7e-4621-9b04-68ed8573ad2a",
                            ConcurrencyStamp = "13a780f2-cee3-4544-9796-3153c159f543",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f8ee5677-2983-40ca-924d-fa131789457b",
                            ConcurrencyStamp = "2b9b6bfc-8fda-465f-a6bb-07b376913f27",
                            Name = "Candidate",
                            NormalizedName = "CANDIDATE"
                        },
                        new
                        {
                            Id = "952428ed-d144-4b77-bb68-46557285f730",
                            ConcurrencyStamp = "f8a5e7e1-deba-42b0-b4ce-3bd7873c07a8",
                            Name = "Treasurer",
                            NormalizedName = "TREASURER"
                        },
                        new
                        {
                            Id = "c9c80dbb-dea4-466c-8024-81c4d59d21ff",
                            ConcurrencyStamp = "d93a78c1-def6-448b-a34f-cc9108b61642",
                            Name = "Officer",
                            NormalizedName = "OFFICER"
                        },
                        new
                        {
                            Id = "db44c661-3aa3-4f69-b766-0dcdb95f9dec",
                            ConcurrencyStamp = "3a9c53e7-4f07-439d-b84b-7aa4719b71b4",
                            Name = "Primary Registered Lobbyist",
                            NormalizedName = "PRIMARY REGISTERED LOBBYIST"
                        },
                        new
                        {
                            Id = "ff029abe-0cbb-41ea-9f31-65bc6c474d65",
                            ConcurrencyStamp = "9edb1dfe-f5ba-4441-a767-64a59dec7b6a",
                            Name = "Other Lobbyost",
                            NormalizedName = "OTHER LOBBYOST"
                        },
                        new
                        {
                            Id = "d761ae56-7978-449c-af48-8ea55cc51cf2",
                            ConcurrencyStamp = "ece98eab-d910-4491-a09e-6fba7fd56069",
                            Name = "IE Filer Primary User",
                            NormalizedName = "IE FILER PRIMARY USER"
                        },
                        new
                        {
                            Id = "c7f1717d-10c0-418e-8ae2-d796dd8893af",
                            ConcurrencyStamp = "df286099-1e5f-4cc4-8792-97bce2924a2d",
                            Name = "IE Filer Secondary User",
                            NormalizedName = "IE FILER SECONDARY USER"
                        },
                        new
                        {
                            Id = "878d4414-d052-4796-9128-e25811b6bde5",
                            ConcurrencyStamp = "7e7d94c3-28bc-43a5-ae14-1ade5a6fb114",
                            Name = "Ethics Primary User",
                            NormalizedName = "ETHICS PRIMARY USER"
                        },
                        new
                        {
                            Id = "8afc03f5-d7f3-4358-90b2-ddbecb8fe77a",
                            ConcurrencyStamp = "8ea00725-f3f3-45cd-b413-46f353fd8c06",
                            Name = "Ethics Secondary User",
                            NormalizedName = "ETHICS SECONDARY USER"
                        });
                });

            modelBuilder.Entity("WebApplication9.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "c2b0541f-4819-4a10-9e62-63d53c2bf8a8",
                            RoleId = "1e67e9cd-bf7e-4621-9b04-68ed8573ad2a"
                        },
                        new
                        {
                            UserId = "aff709de-7468-451e-9839-b538cc7e9941",
                            RoleId = "f8ee5677-2983-40ca-924d-fa131789457b"
                        },
                        new
                        {
                            UserId = "ad89b30a-695b-4296-8a60-fd8f3f2936d7",
                            RoleId = "952428ed-d144-4b77-bb68-46557285f730"
                        },
                        new
                        {
                            UserId = "1f4b26a9-d046-4513-97f8-784c4fd31486",
                            RoleId = "c9c80dbb-dea4-466c-8024-81c4d59d21ff"
                        },
                        new
                        {
                            UserId = "23b03c1d-9439-42c3-989e-afc4caa371f6",
                            RoleId = "db44c661-3aa3-4f69-b766-0dcdb95f9dec"
                        },
                        new
                        {
                            UserId = "c5facb3c-7289-4756-9afb-4e02f5a28740",
                            RoleId = "ff029abe-0cbb-41ea-9f31-65bc6c474d65"
                        },
                        new
                        {
                            UserId = "0fb18dd5-9cff-4635-86d0-76416b16b570",
                            RoleId = "d761ae56-7978-449c-af48-8ea55cc51cf2"
                        },
                        new
                        {
                            UserId = "92465d77-d88d-487a-86aa-d8783fc8702d",
                            RoleId = "c7f1717d-10c0-418e-8ae2-d796dd8893af"
                        },
                        new
                        {
                            UserId = "5f094eb0-c08c-4c95-a085-9e93638d981c",
                            RoleId = "878d4414-d052-4796-9128-e25811b6bde5"
                        },
                        new
                        {
                            UserId = "aac55d50-3863-47ba-bfc0-bd68c0d770af",
                            RoleId = "8afc03f5-d7f3-4358-90b2-ddbecb8fe77a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication9.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication9.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication9.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication9.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
